WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.800
大家好。

00:00:03.800 --> 00:00:08.760
在之前的视频中，我们了解了自我修剪。

00:00:08.760 --> 00:00:10.200
只有自我修剪才能发挥良好作用。

00:00:10.200 --> 00:00:16.480
如果制定这些点的尺寸，请匹配网格的尺寸。

00:00:16.480 --> 00:00:21.600
在这个视频中，我将改变点的大小。

00:00:21.600 --> 00:00:34.120
我会拖到右边。

00:00:34.120 --> 00:00:42.880
我将调用 Bounds 修改器节点来调整点的边界。

00:00:42.880 --> 00:00:45.880
然后我会将它拖入自我修剪节点。

00:00:45.880 --> 00:00:55.160
你可能想在这里调试，或者直接调试这个节点，因为我已经用过

00:00:55.160 --> 00:00:58.800
自我修剪，因此这些点已被删除。

00:00:58.800 --> 00:01:07.920
我将在自我修剪节点上启用调试。

00:01:07.920 --> 00:01:10.800
Bounds修改器有几种模式。

00:01:10.800 --> 00:01:11.880
首先是规模。

00:01:11.880 --> 00:01:18.640
比例模式将把点的当前大小乘以该值。

00:01:18.640 --> 00:01:22.640
例如，该点的尺寸为 30、30、30。

00:01:22.640 --> 00:01:25.740
如果比例值为 1，则没有任何变化。

00:01:25.740 --> 00:01:32.240
如果比例值为2，则相乘后的大小为60、60、60。

00:01:32.240 --> 00:01:34.840
这就是比例模式的工作原理。

00:01:34.840 --> 00:01:40.840
它根据点的当前大小进行倍增。

00:01:40.840 --> 00:01:44.400
现在我将改变 bounds min 的 x 值。

00:01:44.400 --> 00:01:48.500
当改变 x 值时，我知道这是 x 轴。

00:01:48.500 --> 00:01:51.160
这是 x 轴的左侧。

00:01:51.160 --> 00:01:58.160
如果您想更改 x 轴的右侧，那么您可以更改此值。

00:01:58.160 --> 00:02:01.040
这就是边界修饰符的工作方式。

00:02:01.040 --> 00:02:05.080
现在，我将禁用自我修剪节点以便更清楚地查看。

00:02:05.080 --> 00:02:12.000
我将为该节点启用调试。

00:02:12.000 --> 00:02:22.880
现在我将把界限最小值改为 1.3。

00:02:22.880 --> 00:02:31.480
并且bounds max的x值相当长，所以我将其减少到1。

00:02:31.480 --> 00:02:35.400
因此我将把它缩短为 1.3。

00:02:35.400 --> 00:02:38.560
左边依然是这个样子。

00:02:38.560 --> 00:02:43.440
不需要太精确。

00:02:43.440 --> 00:02:46.660
现在我将改变 y 轴的值。

00:02:46.660 --> 00:02:51.560
对于 y 轴，我不需要再改变它了。

00:02:51.560 --> 00:02:53.860
我将保留其为 1。

00:02:53.860 --> 00:02:56.280
而且我不会改变z轴。

00:02:56.280 --> 00:03:01.920
我将保持其原样。

00:03:01.920 --> 00:03:05.440
此后，我将再次启用自我修剪节点。

00:03:05.440 --> 00:03:09.600
我将取消此节点的调试。

00:03:09.600 --> 00:03:15.600
这是使用边界修饰符后的结果。

00:03:15.600 --> 00:03:19.640
网格和点现在匹配得更好了。

00:03:19.640 --> 00:03:27.000
使用边界修饰符之后的自我修剪效果更加良好，更加准确。

00:03:27.000 --> 00:03:50.880
谢谢。

